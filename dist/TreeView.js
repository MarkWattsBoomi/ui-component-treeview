!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){for(var n in t)e.hasOwnProperty(n)||(e[n]=t[n])}(n(1))},function(t,e,n){"use strict";var r=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])};return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(e,"__esModule",{value:!0});var o=n(2);n(3);var a=function(t){function e(e){var n=t.call(this,e)||this;n.componentId="",n.flowKey="",n.attributes=new Map,n.childNodes=[],n.selectedItem=null,n.componentId=e.id,n.flowKey=e.flowKey;var r=manywho.model.getComponent(n.props.id,n.props.flowKey);if(r.attributes)for(var o in r.attributes)n.attributes.set(o,r.attributes[o]);return n}return r(e,t),e.prototype.componentDidMount=function(){this.forceUpdate()},e.prototype.selectItem=function(t){this.selectedItem=t;for(var e in this.refs)this.refs[e].deselectAllChildren()},e.prototype.getSelectedItem=function(){return this.selectedItem},e.prototype.getAttribute=function(t){return this.attributes.has(t)?this.attributes.get(t):null},e.prototype.render=function(){var t=manywho.model.getComponent(this.props.id,this.props.flowKey),e=(manywho.state.getComponent(this.props.id,this.props.flowKey),new Map);t.width&&t.width>0&&e.set("width",t.width+"px"),t.height&&t.height>0&&e.set("height",t.height+"px");var n=this;return this.childNodes=t.objectData.map(function(t,e){var r=manywho.utils.getObjectDataProperty(t.properties,n.getAttribute("parentKeyAttribute")).contentValue;return o.createElement(i,{ref:"G_"+r,parent:n,group:t})}),o.createElement("div",{className:"tree-view",style:e},o.createElement("ul",{className:"tree-root"},this.childNodes))},e}(o.Component),i=function(t){function e(e){var n=t.call(this,e)||this;return n.childNodes=[],n.expanded=!1,n.parent=null,n.queueGroup=null,n.parent=e.parent,n.queueGroup=e.group,n.deselectAllChildren=n.deselectAllChildren.bind(n),n.toggleExpand=n.toggleExpand.bind(n),n.expanded="true"===n.parent.getAttribute("showExpanded"),n}return r(e,t),e.prototype.componentDidMount=function(){},e.prototype.componentWillUnmount=function(){},e.prototype.toggleExpand=function(){this.expanded=!this.expanded,this.forceUpdate()},e.prototype.deselectAllChildren=function(){for(var t in this.refs)this.refs[t].deselect()},e.prototype.render=function(){var t=manywho.state.getComponent(this.parent.componentId,this.parent.flowKey);manywho.model.getComponent(this.parent.componentId,this.parent.flowKey);if(this.childNodes=[],t.loading)return null;var e=manywho.utils.getObjectDataProperty(this.queueGroup.properties,this.parent.getAttribute("parentLabelAttribute")).contentValue,n=manywho.utils.getObjectDataProperty(this.queueGroup.properties,this.parent.getAttribute("parentChildArrayAttribute")).objectData,r=this;n&&(this.childNodes=n.map(function(t,e){var n=manywho.utils.getObjectDataProperty(t.properties,r.parent.getAttribute("parentKeyAttribute")).contentValue;return o.createElement(p,{ref:"Q_"+n,parent:r,queue:t})}));var a=manywho.utils.getObjectDataProperty(this.queueGroup.properties,this.parent.getAttribute("parentIconAttribute")).contentValue;a&&0!==a.length||(a=this.parent.getAttribute("parentDefaultIcon")||"envelope");var i=null;if("true"===this.parent.getAttribute("isCollapsible")&&n.length>0){var s="";s=!0===this.expanded?this.parent.getAttribute("contractIcon")||"minus-sign":this.parent.getAttribute("expandIcon")||"plus-sign",i=o.createElement("span",{className:"glyphicon glyphicon-"+s,style:{"padding-right":"10px"},onClick:this.toggleExpand})}var l=null;return!0===this.expanded&&(l=o.createElement("ul",{className:"tree-leaf"},this.childNodes)),o.createElement("li",{className:"tree-root-item"},i,o.createElement("span",{className:"glyphicon glyphicon-"+a}),o.createElement("span",{className:"queue-group-label"},e),l)},e}(o.Component),p=function(t){function e(e){var n=t.call(this,e)||this;n.selected=!1,n.parent=null,n.queue=null,n.parent=e.parent,n.queue=e.queue,n.select=n.select.bind(n),n.deselect=n.deselect.bind(n);var r=n.parent.parent.getSelectedItem();return n.selected=manywho.utils.getObjectDataProperty(n.queue.properties,n.props.parent.props.parent.getAttribute("childKeyAttribute")).contentValue===r,n}return r(e,t),e.prototype.select=function(){this.parent.parent.selectItem(manywho.utils.getObjectDataProperty(this.queue.properties,this.parent.parent.getAttribute("childKeyAttribute")).contentValue),this.selected=!0;var t=JSON.parse(JSON.stringify(this.queue));t.isSelected=!0;var e={objectData:[t]};manywho.state.setComponent(this.parent.parent.componentId,e,this.parent.parent.flowKey,!0);var n=manywho.model.getOutcome(this.parent.parent.getAttribute("outcomeIdForSelect"),this.parent.parent.flowKey);manywho.component.onOutcome(n,null,this.parent.parent.flowKey)},e.prototype.deselect=function(){this.selected=!1},e.prototype.componentDidMount=function(){var t=null,e=manywho.model.getComponent(this.parent.parent.componentId,this.parent.parent.flowKey),n=manywho.state.getComponent(this.parent.parent.componentId,this.parent.parent.flowKey)||{};if(n&&n.objectData&&n.objectData[0]&&n.objectData[0].properties?t=n.objectData[0]:e&&e.objectData&&e.objectData[0]&&(t=e.objectData[0]),t){manywho.utils.getObjectDataProperty(this.queue.properties,this.parent.parent.getAttribute("childKeyAttribute")).contentValue===manywho.utils.getObjectDataProperty(t.properties,this.parent.parent.getAttribute("childKeyAttribute")).contentValue&&(this.selected=!0)}},e.prototype.render=function(){var t=manywho.state.getComponent(this.parent.parent.componentId,this.parent.parent.flowKey);manywho.model.getComponent(this.parent.parent.componentId,this.parent.parent.flowKey);if(t.loading)return null;var e=(manywho.utils.getObjectDataProperty(this.queue.properties,this.parent.parent.getAttribute("childKeyAttribute")).contentValue,manywho.utils.getObjectDataProperty(this.queue.properties,this.parent.parent.getAttribute("childLabelAttribute")).contentValue),n=manywho.utils.getObjectDataProperty(this.queue.properties,this.parent.parent.getAttribute("childSubLabelAttribute")).contentValue,r=manywho.utils.getObjectDataProperty(this.queue.properties,this.parent.parent.getAttribute("childIconAttribute")).contentValue;r&&0!==r.length||(r=this.parent.parent.getAttribute("childDefaultIcon")||"tasks");var a=this.selected?"tree-leaf tree-leaf-selected":"tree-leaf";return o.createElement("li",{className:a,onClick:this.select},o.createElement("span",{className:"glyphicon glyphicon-"+r}),o.createElement("span",{className:"queue-label"},e),o.createElement("span",{className:"queue-count"},"("+n+")"))},e}(o.Component);manywho.component.register("TreeView",a),e.default=a},function(t,e){t.exports=React},function(t,e){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,